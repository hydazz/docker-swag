name: New Docker Update CI

on:
  workflow_dispatch:

jobs:
  master:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set Enviroment Variables
      id: variables
      env:
        GIT_USER: hydazz
        GIT_REPO: docker-swag
        GIT_BRANCH: main
        DOCKERHUB_IMAGE: vcxpz/swag
        DOCKERIMAGE_TAG: latest
      run: |
        mkdir /tmp/workdir
        echo "::set-output name=GIT_USER::$GIT_USER"
        echo "::set-output name=GIT_REPO::$GIT_REPO"
        echo "::set-output name=GIT_BRANCH::$GIT_BRANCH"
        echo "::set-output name=DOCKERHUB_IMAGE::$DOCKERHUB_IMAGE"
        echo "::set-output name=DOCKERIMAGE_TAG::$DOCKERIMAGE_TAG"
        echo "::set-output name=VERSION::$(curl --silent "https://api.github.com/repos/linuxserver/$GIT_REPO/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')"
        echo "::set-output name=OVERLAY_VERSION::$(curl --silent "https://api.github.com/repos/just-containers/s6-overlay/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')"

    - name: Docker Login
      env:
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo $DOCKER_PASSWORD | docker login -u vcxpz --password-stdin

    - name: Build the Docker image
      env:
        VERSION: ${{ steps.variables.outputs.VERSION }}
        DOCKERHUB_IMAGE: ${{ steps.variables.outputs.DOCKERHUB_IMAGE }}
      run: |
        docker build --no-cache --pull . --file Dockerfile --build-arg VERSION="$VERSION" --build-arg BUILD_DATE="$(date +%Y-%m-%d)" --tag "$DOCKERHUB_IMAGE":cibuild

    - name: Get New Packages From Image
      id: packages
      env:
        GIT_USER: ${{ steps.variables.outputs.GIT_USER }}
        GIT_REPO: ${{ steps.variables.outputs.GIT_REPO }}
        GIT_BRANCH: ${{ steps.variables.outputs.GIT_BRANCH }}
        DOCKERHUB_IMAGE: ${{ steps.variables.outputs.DOCKERHUB_IMAGE}}
      run: |
        docker run --rm --entrypoint '/bin/sh' -v /tmp/workdir:/tmp "$DOCKERHUB_IMAGE":cibuild -c "\
            apk info -v | sort >/tmp/package_versions.txt && \
            echo $(echo $(nginx -v 2>&1) | grep -o '[0-9.]*$') >/tmp/nginx_version.txt && \
            echo $(php -r 'echo PHP_VERSION;') >/tmp/php_version.txt"
        git clone -b $GIT_BRANCH https://github.com/"$GIT_USER"/"$GIT_REPO".git /tmp/workdir/"$GIT_REPO"
        cd /tmp/workdir/"$GIT_REPO"
        if [ ! -f package_versions.txt ]; then \
          touch package_versions.txt; \
        fi
        echo "::set-output name=PACKAGES_OLD_MD5::$(md5sum package_versions.txt | awk '{ print $1 }')"
        echo "::set-output name=PACKAGES_NEW_MD5::$(md5sum /tmp/workdir/package_versions.txt | awk '{ print $1 }')"
        echo "::set-output name=NGINX_VERSION::$(cat /tmp/workdir/nginx_version.txt)"
        echo "::set-output name=PHP_VERSION::$(cat /tmp/workdir/php_version.txt)"

    - name: Update README.md
      id: readme
      env:
        OVERLAY_VERSION: ${{ steps.variables.outputs.OVERLAY_VERSION }}
        NGINX_VERSION: ${{ steps.packages.outputs.NGINX_VERSION }}
        PHP_VERSION: ${{ steps.packages.outputs.PHP_VERSION }}
      run: |
        echo "::set-output name=README_OLD_MD5::$(md5sum README.md | awk '{ print $1 }')"
        sed -i \
          -e "s/s6--overlay-[0-9].[0-9].[0-9].[0-9]/s6--overlay-${OVERLAY_VERSION}/g" \
          -e "s/nginx-[0-9].[0-9][0-9].[0-9]/nginx-${NGINX_VERSION}/g" \
          -e "s/php-[0-9].[0-9].[0-9][0-9]/php-${PHP_VERSION}/g" \
          README.md
        echo "::set-output name=README_NEW_MD5::$(md5sum README.md | awk '{ print $1 }')"

    - name: Stage README.md Changes
      if: steps.readme.outputs.README_OLD_MD5 != steps.readme.outputs.README_NEW_MD5
      id: push_readme
      run: |
        git add README.md
        git commit -m 'Bot Updating Readme' README.md
        echo "::set-output name=push_readme::1"

    - name: Stage package_versions.txt Changes
      if: steps.packages.outputs.PACKAGES_OLD_MD5 != steps.packages.outputs.PACKAGES_NEW_MD5
      id: push_packageversions
      env:
        GIT_REPO: ${{ steps.variables.outputs.GIT_REPO }}
      run: |
        rm package_versions.txt
        mv /tmp/workdir/package_versions.txt package_versions.txt
        git add package_versions.txt
        git commit -m 'Bot Updating Package Versions' package_versions.txt
        echo "::set-output name=push_packageversions::1"

    - name: Push Changes To Github
      if: steps.push_readme.outputs.push_readme || steps.push_packageversions.outputs.push_packageversions == 1
      env:
        GIT_USER: ${{ steps.variables.outputs.GIT_USER }}
        GIT_REPO: ${{ steps.variables.outputs.GIT_REPO }}
        GIT_BRANCH: ${{ steps.variables.outputs.GIT_BRANCH }}
        GIT_KEY: ${{ secrets.GIT_KEY }}
      run: |
        git push https://"$GIT_USER":"$GIT_KEY"@github.com/"$GIT_USER"/"$GIT_REPO".git $GIT_BRANCH

    - name: Tag And Push Docker Image
      env:
        DOCKERHUB_IMAGE: ${{ steps.variables.outputs.DOCKERHUB_IMAGE }}
        DOCKERIMAGE_TAG: ${{ steps.variables.outputs.DOCKERIMAGE_TAG }}
      run: |
        docker tag "$DOCKERHUB_IMAGE":cibuild "$DOCKERHUB_IMAGE":"$DOCKERIMAGE_TAG"
        docker push "$DOCKERHUB_IMAGE":"$DOCKERIMAGE_TAG"
