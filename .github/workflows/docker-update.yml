name: Docker Update CI

on:
  schedule:
    - cron:  '10 0 * * 0'
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - '**/README.md'
      - '**/package_versions.txt'
      - '.github/**'

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2

    - name: Set Enviroment Variables
      id: variables
      env:
        GIT_USER: hydazz
        GIT_REPO: docker-swag
        GIT_BRANCH: main
        DOCKERHUB_IMAGE: vcxpz/swag
        DOCKERIMAGE_TAG: latest
      run: |
        mkdir /tmp/workdir
        echo "::set-output name=GIT_USER::$GIT_USER"
        echo "::set-output name=GIT_REPO::$GIT_REPO"
        echo "::set-output name=GIT_BRANCH::$GIT_BRANCH"
        echo "::set-output name=DOCKERHUB_IMAGE::$DOCKERHUB_IMAGE"
        echo "::set-output name=DOCKERIMAGE_TAG::$DOCKERIMAGE_TAG"
        VERSION="$(curl --silent "https://api.github.com/repos/linuxserver/$GIT_REPO/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')"
        echo "::set-output name=VERSION::$VERSION"

    - name: Docker Login
      env:
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo $DOCKER_PASSWORD | docker login -u vcxpz --password-stdin

    - name: Build the Docker image
      env:
        VERSION: ${{ steps.variables.outputs.VERSION }}
        DOCKERHUB_IMAGE: ${{ steps.variables.outputs.DOCKERHUB_IMAGE }}
      run: |
        docker build --no-cache --pull . --file Dockerfile --build-arg VERSION="$VERSION" --build-arg BUILD_DATE="$(date +%Y-%m-%d)" --tag "$DOCKERHUB_IMAGE":cibuild

    - name: Compare package_versions.txt
      id: packages
      env:
        GIT_USER: ${{ steps.variables.outputs.GIT_USER }}
        GIT_REPO: ${{ steps.variables.outputs.GIT_REPO }}
        GIT_BRANCH: ${{ steps.variables.outputs.GIT_BRANCH }}
        DOCKERHUB_IMAGE: ${{ steps.variables.outputs.DOCKERHUB_IMAGE}}
      run: |
        docker run --rm --entrypoint '/bin/sh' -v /tmp/workdir:/tmp "$DOCKERHUB_IMAGE":cibuild -c '\
            apk info -v > /tmp/package_versions.txt && \
            sort -o /tmp/package_versions.txt /tmp/package_versions.txt && \
            chmod 777 /tmp/package_versions.txt'
        git clone -b $GIT_BRANCH https://github.com/"$GIT_USER"/"$GIT_REPO".git /tmp/workdir/"$GIT_REPO"
        cd /tmp/workdir/"$GIT_REPO"
        if [ ! -f package_versions.txt ]; then \
          touch package_versions.txt; \
        fi
        OLD="$(md5sum package_versions.txt | awk '{ print $1 }')"
        echo "::set-output name=OLD::$OLD"
        NEW="$(md5sum /tmp/workdir/package_versions.txt | awk '{ print $1 }')"
        echo "::set-output name=NEW::$NEW"

    - name: Push New packaage_versions.txt
      if: steps.packages.outputs.NEW != steps.packages.outputs.OLD
      env:
        GIT_USER: ${{ steps.variables.outputs.GIT_USER }}
        GIT_REPO: ${{ steps.variables.outputs.GIT_REPO }}
        GIT_BRANCH: ${{ steps.variables.outputs.GIT_BRANCH }}
        GIT_KEY: ${{ secrets.GIT_KEY }}
      run: |
        cd /tmp/workdir/"$GIT_REPO"/
        rm package_versions.txt
        mv /tmp/workdir/package_versions.txt package_versions.txt
        git config --global user.email "alexanderhyde@icloud.com"
        git config --global user.name "$GIT_USER"
        git add package_versions.txt
        git commit -m 'Bot Updating Package Versions'
        git push https://"$GIT_USER":"$GIT_KEY"@github.com/"$GIT_USER"/"$GIT_REPO".git $GIT_BRANCH

    - name: Tag And Push Docker Image
      env:
        DOCKERHUB_IMAGE: ${{ steps.variables.outputs.DOCKERHUB_IMAGE }}
        DOCKERIMAGE_TAG: ${{ steps.variables.outputs.DOCKERIMAGE_TAG }}
      run: |
        docker tag "$DOCKERHUB_IMAGE":cibuild "$DOCKERHUB_IMAGE":"$DOCKERIMAGE_TAG"
        docker push "$DOCKERHUB_IMAGE":"$DOCKERIMAGE_TAG"

    - name: Cleanup
      env:
        DOCKERHUB_IMAGE: ${{ steps.variables.outputs.DOCKERHUB_IMAGE }}
        DOCKERIMAGE_TAG: ${{ steps.variables.outputs.DOCKERIMAGE_TAG }}
      run: |
        docker image rm -f "$DOCKERHUB_IMAGE":"$DOCKERIMAGE_TAG"
        rm -rf /tmp/workdir
