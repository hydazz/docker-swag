name: Docker Update CI

on:
  schedule:
    - cron:  '20 0 * * 0'
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - '**/README.md'
      - '**/package_versions.txt'
      - '**/.github/workflows/docker-update.yml'

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Set Enviroment Variables
      run: |
        mkdir /tmp/workdir
        # This may not be a pretty way to set env variables but it works
        echo "hydazz" >/tmp/workdir/GH_USER
        echo "docker-swag" >/tmp/workdir/GH_REPO
        echo "vcxpz/swag" >/tmp/workdir/DOCKERHUB_IMAGE
        # Set the user below to $(cat /tmp/workdir/GH_USER) or manually set it
        echo "$(curl --silent "https://api.github.com/repos/linuxserver/$(cat /tmp/workdir/GH_REPO)/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')" >/tmp/workdir/version
    - name: Docker Login
      env:
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo $DOCKER_PASSWORD | docker login -u vcxpz --password-stdin
    - name: Build the Docker image
      run: |
        docker build --no-cache --pull . --file Dockerfile --build-arg VERSION="$(cat /tmp/workdir/version)" --build-arg BUILD_DATE="$(date +%Y-%m-%d)" --tag $(cat /tmp/workdir/DOCKERHUB_IMAGE):cibuild
    - name: Compare package_versions.txt
      id: packages
      run: |
        docker run --rm --entrypoint '/bin/sh' -v /tmp/workdir:/tmp "$(cat /tmp/workdir/DOCKERHUB_IMAGE)":cibuild -c '\
            apk info -v > /tmp/package_versions.txt && \
            sort -o /tmp/package_versions.txt /tmp/package_versions.txt && \
            chmod 777 /tmp/package_versions.txt'
        git clone https://github.com/"$(cat /tmp/workdir/GH_USER)"/"$(cat /tmp/workdir/GH_REPO)".git /tmp/workdir/"$(cat /tmp/workdir/GH_REPO)"
        cd /tmp/workdir/"$(cat /tmp/workdir/GH_REPO)"
        if [ ! -f package_versions.txt ]; then \
          touch package_versions.txt; \
        fi
        OLD="$(md5sum package_versions.txt | awk '{ print $1 }')"
        echo "::set-output name=OLD::$OLD"
        NEW="$(md5sum /tmp/workdir/package_versions.txt | awk '{ print $1 }')"
        echo "::set-output name=NEW::$NEW"
    - name: Push New packaage_versions.txt
      if: steps.packages.outputs.NEW != steps.packages.outputs.OLD
      env:
        GIT_KEY: ${{ secrets.GIT_KEY }}
      run: |
        cd /tmp/workdir/"$(cat /tmp/workdir/GH_REPO)"/
        rm package_versions.txt
        mv /tmp/workdir/package_versions.txt package_versions.txt
        git config --global user.email "alexanderhyde@icloud.com"
        git config --global user.name "hydazz"
        git add package_versions.txt
        git commit -m 'Bot Updating Package Versions'
        git push https://"$(cat /tmp/workdir/GH_USER)":$GIT_KEY@github.com/"$(cat /tmp/workdir/GH_USER)"/"$(cat /tmp/workdir/GH_REPO)".git --all
    - name: Tag And Push Docker Image
      run: |
        # Tag and push Docker image to Docker hub
        docker tag $(cat /tmp/workdir/DOCKERHUB_IMAGE):cibuild $(cat /tmp/workdir/DOCKERHUB_IMAGE):latest
        docker push $(cat /tmp/workdir/DOCKERHUB_IMAGE):latest
    - name: Cleanup
      run: |
        docker image rm -f "$(cat /tmp/workdir/DOCKERHUB_IMAGE)":latest
        rm -rf /tmp/workdir
